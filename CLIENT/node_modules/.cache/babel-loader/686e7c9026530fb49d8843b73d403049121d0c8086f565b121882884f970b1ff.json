{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    products: [],\n    quantity: 0,\n    total: 0\n  },\n  reducers: {\n    // addProduct: (state, action) => {\n    //     state.quantity += 1\n    //     state.products.push(action.payload)\n    //     state.total += action.payload.price * action.payload.quantity\n    // },\n    addProduct: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const existingProduct = state.products.find(p => p._id === productId);\n      if (existingProduct) {\n        // Update quantity and total\n        state.quantity += quantity;\n        state.total += quantity * existingProduct.price;\n        existingProduct.quantity += quantity;\n      } else {\n        // Add new product\n        const newProduct = {\n          _id: productId,\n          quantity,\n          price: 0 // Replace 0 with the actual price value for the new product\n          // Add other properties here...\n        };\n\n        state.quantity += quantity;\n        state.total += quantity * newProduct.price;\n        state.products.push(newProduct);\n      }\n    },\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const product = state.products.find(p => p._id === productId);\n      if (product) {\n        const prevQuantity = product.quantity;\n        state.quantity += quantity - prevQuantity;\n        state.total += (quantity - prevQuantity) * product.price;\n        product.quantity = quantity;\n      }\n    },\n    clearCart: state => {\n      state.products = [];\n      state.quantity = 0;\n      state.total = 0;\n    },\n    deleteProduct: (state, action) => {\n      const productIdToDelete = action.payload;\n\n      // Find the index of the product with the matching productId\n      const productIndexToDelete = state.products.findIndex(product => product.productId === productIdToDelete);\n\n      // If the product is found, remove it from the products array\n      if (productIndexToDelete !== -1) {\n        const deletedProduct = state.products[productIndexToDelete];\n\n        // Update the quantity and total\n        state.quantity -= deletedProduct.quantity;\n        state.total -= deletedProduct.price * deletedProduct.quantity;\n\n        // Remove the product from the products array\n        state.products.splice(productIndexToDelete, 1);\n      }\n\n      // Ensure quantity and total are not negative\n      state.quantity = Math.max(state.quantity, 0);\n      state.total = Math.max(state.total, 0);\n    }\n  }\n});\nexport const {\n  addProduct,\n  clearCart,\n  deleteProduct,\n  updateQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","products","quantity","total","reducers","addProduct","state","action","productId","payload","existingProduct","find","p","_id","price","newProduct","push","updateQuantity","product","prevQuantity","clearCart","deleteProduct","productIdToDelete","productIndexToDelete","findIndex","deletedProduct","splice","Math","max","actions","reducer"],"sources":["C:/Users/AGFirass/React/New folder/CLIENT/src/redux/cartRedux.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nconst cartSlice = createSlice(\r\n    {\r\n        name: \"cart\",\r\n        initialState: {\r\n            products: [],\r\n            quantity: 0,\r\n            total: 0\r\n        },\r\n        reducers: {\r\n            // addProduct: (state, action) => {\r\n            //     state.quantity += 1\r\n            //     state.products.push(action.payload)\r\n            //     state.total += action.payload.price * action.payload.quantity\r\n            // },\r\n            addProduct: (state, action) => {\r\n              const { productId, quantity } = action.payload;\r\n              const existingProduct = state.products.find((p) => p._id === productId);\r\n            \r\n              if (existingProduct) {\r\n                // Update quantity and total\r\n                state.quantity += quantity;\r\n                state.total += quantity * existingProduct.price;\r\n                existingProduct.quantity += quantity;\r\n              } else {\r\n                // Add new product\r\n                const newProduct = {\r\n                  _id: productId,\r\n                  quantity,\r\n                  price: 0, // Replace 0 with the actual price value for the new product\r\n                  // Add other properties here...\r\n                };\r\n            \r\n                state.quantity += quantity;\r\n                state.total += quantity * newProduct.price;\r\n                state.products.push(newProduct);\r\n              }\r\n            },\r\n            updateQuantity: (state, action) => {\r\n              const { productId, quantity } = action.payload;\r\n              const product = state.products.find((p) => p._id === productId);\r\n              if (product) {\r\n                const prevQuantity = product.quantity;\r\n                state.quantity += quantity - prevQuantity;\r\n                state.total += (quantity - prevQuantity) * product.price;\r\n                product.quantity = quantity;\r\n              }\r\n            },\r\n            clearCart: (state) => {\r\n                state.products = [];\r\n                state.quantity = 0;\r\n                state.total = 0;\r\n              },\r\n              deleteProduct: (state, action) => {\r\n                const productIdToDelete = action.payload;\r\n              \r\n                // Find the index of the product with the matching productId\r\n                const productIndexToDelete = state.products.findIndex(product => product.productId === productIdToDelete);\r\n              \r\n                // If the product is found, remove it from the products array\r\n                if (productIndexToDelete !== -1) {\r\n                  const deletedProduct = state.products[productIndexToDelete];\r\n              \r\n                  // Update the quantity and total\r\n                  state.quantity -= deletedProduct.quantity;\r\n                  state.total -= deletedProduct.price * deletedProduct.quantity;\r\n              \r\n                  // Remove the product from the products array\r\n                  state.products.splice(productIndexToDelete, 1);\r\n                }\r\n              \r\n                // Ensure quantity and total are not negative\r\n                state.quantity = Math.max(state.quantity, 0);\r\n                state.total = Math.max(state.total, 0);\r\n              },   \r\n        }\r\n    }\r\n)\r\n\r\nexport const { addProduct, clearCart, deleteProduct, updateQuantity } = cartSlice.actions\r\nexport default cartSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CACzB;EACIE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,CAAC;IACXC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACN;IACA;IACA;IACA;IACA;IACAC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEC,SAAS;QAAEN;MAAS,CAAC,GAAGK,MAAM,CAACE,OAAO;MAC9C,MAAMC,eAAe,GAAGJ,KAAK,CAACL,QAAQ,CAACU,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKL,SAAS,CAAC;MAEvE,IAAIE,eAAe,EAAE;QACnB;QACAJ,KAAK,CAACJ,QAAQ,IAAIA,QAAQ;QAC1BI,KAAK,CAACH,KAAK,IAAID,QAAQ,GAAGQ,eAAe,CAACI,KAAK;QAC/CJ,eAAe,CAACR,QAAQ,IAAIA,QAAQ;MACtC,CAAC,MAAM;QACL;QACA,MAAMa,UAAU,GAAG;UACjBF,GAAG,EAAEL,SAAS;UACdN,QAAQ;UACRY,KAAK,EAAE,CAAC,CAAE;UACV;QACF,CAAC;;QAEDR,KAAK,CAACJ,QAAQ,IAAIA,QAAQ;QAC1BI,KAAK,CAACH,KAAK,IAAID,QAAQ,GAAGa,UAAU,CAACD,KAAK;QAC1CR,KAAK,CAACL,QAAQ,CAACe,IAAI,CAACD,UAAU,CAAC;MACjC;IACF,CAAC;IACDE,cAAc,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEC,SAAS;QAAEN;MAAS,CAAC,GAAGK,MAAM,CAACE,OAAO;MAC9C,MAAMS,OAAO,GAAGZ,KAAK,CAACL,QAAQ,CAACU,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKL,SAAS,CAAC;MAC/D,IAAIU,OAAO,EAAE;QACX,MAAMC,YAAY,GAAGD,OAAO,CAAChB,QAAQ;QACrCI,KAAK,CAACJ,QAAQ,IAAIA,QAAQ,GAAGiB,YAAY;QACzCb,KAAK,CAACH,KAAK,IAAI,CAACD,QAAQ,GAAGiB,YAAY,IAAID,OAAO,CAACJ,KAAK;QACxDI,OAAO,CAAChB,QAAQ,GAAGA,QAAQ;MAC7B;IACF,CAAC;IACDkB,SAAS,EAAGd,KAAK,IAAK;MAClBA,KAAK,CAACL,QAAQ,GAAG,EAAE;MACnBK,KAAK,CAACJ,QAAQ,GAAG,CAAC;MAClBI,KAAK,CAACH,KAAK,GAAG,CAAC;IACjB,CAAC;IACDkB,aAAa,EAAEA,CAACf,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAMe,iBAAiB,GAAGf,MAAM,CAACE,OAAO;;MAExC;MACA,MAAMc,oBAAoB,GAAGjB,KAAK,CAACL,QAAQ,CAACuB,SAAS,CAACN,OAAO,IAAIA,OAAO,CAACV,SAAS,KAAKc,iBAAiB,CAAC;;MAEzG;MACA,IAAIC,oBAAoB,KAAK,CAAC,CAAC,EAAE;QAC/B,MAAME,cAAc,GAAGnB,KAAK,CAACL,QAAQ,CAACsB,oBAAoB,CAAC;;QAE3D;QACAjB,KAAK,CAACJ,QAAQ,IAAIuB,cAAc,CAACvB,QAAQ;QACzCI,KAAK,CAACH,KAAK,IAAIsB,cAAc,CAACX,KAAK,GAAGW,cAAc,CAACvB,QAAQ;;QAE7D;QACAI,KAAK,CAACL,QAAQ,CAACyB,MAAM,CAACH,oBAAoB,EAAE,CAAC,CAAC;MAChD;;MAEA;MACAjB,KAAK,CAACJ,QAAQ,GAAGyB,IAAI,CAACC,GAAG,CAACtB,KAAK,CAACJ,QAAQ,EAAE,CAAC,CAAC;MAC5CI,KAAK,CAACH,KAAK,GAAGwB,IAAI,CAACC,GAAG,CAACtB,KAAK,CAACH,KAAK,EAAE,CAAC,CAAC;IACxC;EACN;AACJ,CACJ,CAAC;AAED,OAAO,MAAM;EAAEE,UAAU;EAAEe,SAAS;EAAEC,aAAa;EAAEJ;AAAe,CAAC,GAAGnB,SAAS,CAAC+B,OAAO;AACzF,eAAe/B,SAAS,CAACgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}